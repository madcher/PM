//
// Реализовать функцию checkSyntax(string), проверяющую на синтаксическую верность последовательность скобок. Задача не сводится к простой проверке сбалансированности скобок. Нужно еще учитывать их последовательность (вложенность).
//
// Обратите внимание на производительность вашего решения.
// Решение должно быть компактным.
// Решение должно быть простым, умещаться в 1м файле и содержать 20-30 строк кода или меньше.
// Идеальное время решения на задачу не более 30 минут (задачу можно решить и за 10 минут).
//
// Покажите решение, если нужно проверять следующий набор скобок: <,[,{,(
//
// Изменится ли ваше решение, если нужно проверять только такой набор скобок: <,[,{
//
// В случае ошибки возвращаем 1.
// В остальных случаех возвращаем 0.
function checkSyntax(s){
  var a ="(){}[]<>";
  var m="";
  for (k =0; k< s.length; k++)
  {
    if (a.indexOf(s[k])>=0)
    {
      m+=s[k];
      //alert(s[k]);
    }
  }
  //alert ("massiv:"+m);
  if (m.length%2>0){
    //alert("long !!!");
    return 1;

  }
  else{
    for (i =0; i< m.length/2-1; i++){
      if ( m.slice(i,m.length).indexOf(a[a.indexOf(m[i])+1])<0 ){//нужно поменять скобку на наоборот
        //alert("ne sovpadaet1"+i); alert("ne sovpadaet2"+a[a.indexOf(m[m.length-i-1])-1]);
        return 1;
      }
    }
  }
  return 0;
}



//checkSyntax("---(++++)----") == 0;



checkSyntax("---(++++)----") == 0;
//checkSyntax("") -> 0;
checkSyntax("before ( middle []) after ") == 0;
checkSyntax(") (") == 1;
checkSyntax("} {") == 1;
checkSyntax("<(   >)") == 1;
checkSyntax("(  [  <>  ()  ]  <>  )") == 0;
checkSyntax("   (      [)") == 1;
